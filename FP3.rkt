#lang racket
(require data/collection)


;create a pair which will represent a card with suit in the  car and
;rank in the cdr positions
(define (card suit rank)
  (cons suit rank))
;create a deck of 52 cards using the list->vector procedure
(define (createDeck)
  (list->vector (list (card 0 0)
                      (card 0 1)
                      (card 0 2)
                      (card 0 3)
                      (card 0 4)
                      (card 0 5)
                      (card 0 6)
                      (card 0 7)
                      (card 0 8)
                      (card 0 9)
                      (card 0 10)
                      (card 0 11)
                      (card 0 12)
                      (card 1 0)
                      (card 1 1)
                      (card 1 2)
                      (card 1 3)
                      (card 1 4)
                      (card 1 5)
                      (card 1 6)
                      (card 1 7)
                      (card 1 8)
                      (card 1 9)
                      (card 1 10)
                      (card 1 11)
                      (card 1 12)
                      (card 2 0)
                      (card 2 1)
                      (card 2 2)
                      (card 2 3)
                      (card 2 4)
                      (card 2 5)
                      (card 2 6)
                      (card 2 7)
                      (card 2 8)
                      (card 2 9)
                      (card 2 10)
                      (card 2 11)
                      (card 2 12)
                      (card 3 0)
                      (card 3 1)
                      (card 3 2)
                      (card 3 3)
                      (card 3 4)
                      (card 3 5)
                      (card 3 6)
                      (card 3 7)
                      (card 3 8)
                      (card 3 9)
                      (card 3 10)
                      (card 3 11)
                      (card 3 12)
                      (card 4 0)
                      (card 4 1)
                      (card 4 2)
                      (card 4 3)
                      (card 4 4)
                      (card 4 5)
                      (card 4 6)
                      (card 4 7)
                      (card 4 8)
                      (card 4 9)
                      (card 4 10)
                      (card 4 11)
                      (card 4 12)))
  )
;Draw a random card given the implemented Deck
;does not yet remove card from the vector
(define (drawCard deck)
  (let ([suit (random 4)]
        [rank (random 13)]
        [currentCard (cons 0 0)])
    (begin  (set! currentCard (vector-ref deck (vector-member (card suit rank) deck))) (vector-map (lambda (n) (if(equal? n (card suit rank))
                                                                                                                  #f
                                                                                                                  #t)) deck)
            currentCard)
  ))
  



